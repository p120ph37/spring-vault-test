/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package spring.vault.test;

import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.Duration;

import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.core5.util.Timeout;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.cloud.vault.config.VaultProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Import;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.vault.client.ClientHttpRequestFactoryFactory.HttpComponents;
import org.springframework.vault.client.VaultEndpoint;
import org.springframework.vault.client.VaultEndpointProvider;
import org.springframework.vault.config.AbstractVaultConfiguration.ClientFactoryWrapper;
import org.springframework.vault.core.VaultTemplate;
import org.springframework.vault.support.ClientOptions;
import org.springframework.vault.support.SslConfiguration;
import org.springframework.web.client.ResourceAccessException;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT,
properties = {
    "spring.cloud.vault.authentication=none",
    "spring.cloud.vault.read-timeout=1000",
})
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@Import({
    TimeoutTests.LocalServerPortVaultEndpointProvider.class,
//    TimeoutTests.FixedClientFactoryWrapper.class,
})
class TimeoutTests {

    static class LocalServerPortVaultEndpointProvider implements VaultEndpointProvider, ApplicationContextAware {
        ApplicationContext applicationContext = null;

        @Override
        public VaultEndpoint getVaultEndpoint() {
            return VaultEndpoint.from(
                "http://localhost:" + this.applicationContext.getEnvironment().getProperty("local.server.port") + "/"
            );
        }

        @Override
        public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
            this.applicationContext = applicationContext;
        }
    }

    static class FixedClientFactoryWrapper extends ClientFactoryWrapper {

        public static HttpClientBuilder getHttpClientBuilder(
            ClientOptions options,
            SslConfiguration sslConfiguration
        ) throws GeneralSecurityException, IOException {
            HttpClientBuilder httpClientBuilder = HttpComponents.getHttpClientBuilder(
                options, sslConfiguration
            );
            RequestConfig requestConfig = RequestConfig.custom()
                .setConnectTimeout(Timeout.ofMilliseconds(options.getConnectionTimeout().toMillis()))
                // The following line was originally ".setSocketTimeout(" before ebd734b but got removed.
                // https://github.com/spring-projects/spring-vault/commit/ebd734babac4092a33896db25f7a44cb9f0e4dbf#diff-e8a1d7e410e8e525478a6d50b17d557c8cdcdedf9cd34623b0c8b0587e579d3cL314
                .setResponseTimeout(Timeout.ofMilliseconds(options.getReadTimeout().toMillis()))
                .setAuthenticationEnabled(true)
                .setRedirectsEnabled(true)
                .build();
            httpClientBuilder.setDefaultRequestConfig(requestConfig);
            return httpClientBuilder;
        }

        public FixedClientFactoryWrapper(
            VaultProperties vaultProperties
        ) throws GeneralSecurityException, IOException {
            super(
                new HttpComponentsClientHttpRequestFactory(
                    getHttpClientBuilder(
                        new ClientOptions(
                            Duration.ofMillis(vaultProperties.getConnectionTimeout()),
                            Duration.ofMillis(vaultProperties.getReadTimeout())
                        ),
                        SslConfiguration.unconfigured()
                    ).build()
                )
            );
        }

    }

    @Autowired
    private VaultTemplate vaultTemplate;

    // This test passes if the explicit read-timeout application.properties setting has been applied
    @Test
    void slowguyShouldTimeout5() throws Exception {
        this.vaultTemplate.doWithVault(vaultRestTemplate -> {
            assertThatExceptionOfType(ResourceAccessException.class).isThrownBy(() -> {
                vaultRestTemplate.getForObject("/sleep/5", String.class);
            });
            return null;
        });
    }

    // This test passes if the default 15s timeout or shorter has been applied
    @Test
    void slowguyShouldTimeout20() throws Exception {
        this.vaultTemplate.doWithVault(vaultRestTemplate -> {
            assertThatExceptionOfType(ResourceAccessException.class).isThrownBy(() -> {
                vaultRestTemplate.getForObject("/sleep/20", String.class);
            });
            return null;
        });
    }

    // This test passes if the default Apache Http 3-minute timeout (or shorter) is in effect
    @Test
    void slowguyShouldTimeout240() throws Exception {
        this.vaultTemplate.doWithVault(vaultRestTemplate -> {
            assertThatExceptionOfType(ResourceAccessException.class).isThrownBy(() -> {
                vaultRestTemplate.getForObject("/sleep/240", String.class);
            });
            return null;
        });
    }
}
